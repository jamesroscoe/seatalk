#include "../seatalk_settings.h"

typedef enum { DISTANCE_UNITS_NAUTICAL, DISTANCE_UNITS_STATUTE, DISTANCE_UNITS_METRIC } DISTANCE_UNITS;

typedef enum { ENGINE_ID_SINGLE, ENGINE_ID_PORT, ENGINE_ID_STARBOARD } ENGINE_ID;

typedef enum { ANGLE_REFERENCE_TRUE, ANGLE_REFERENCE_MAGNETIC, ANGLE_REFERENCE_BOAT } ANGLE_REFERENCE;

typedef enum { TURN_DIRECTION_NONE, TURN_DIRECTION_LEFT, TURN_DIRECTION_RIGHT } TURN_DIRECTION;

typedef enum { LATITUDE_HEMISPHERE_NORTH, LATITUDE_HEMISPHERE_SOUTH } LATITUDE_HEMISPHERE;
typedef enum { LONGITUDE_HEMISPHERE_WEST, LONGITUDE_HEMISPHERE_EAST } LONGITUDE_HEMISPHERE;

typedef enum { TIMER_MODE_COUNT_UP, TIMER_MODE_COUNT_DOWN, TIMER_MODE_COUNT_UP_AND_START, TIMER_MODE_COUNT_DOWN_AND_START } TIMER_MODE;

typedef enum { COURSE_COMPUTER_FAILURE_TYPE_NONE, COURSE_COMPUTER_FAILURE_TYPE_AUTO_RELEASE_ERROR, COURSE_COMPUTER_FAILURE_TYPE_DRIVE_STOPPED } COURSE_COMPUTER_FAILURE_TYPE;

#define AUTOPILOT_DISPLAY_OFF 0x01
#define AUTOPILOT_DISPLAY_400G 0x02
#define AUTOPILOT_DISPLAY_NO_DATA 0x8
#define AUTOPILOT_DISPLAY_LARGE_XTE 0x10
#define AUTOPILOT_DISPLAY_AUTO_REL 0x80

#define ALARM_SHALLOW_WATER 0x0001
#define ALARM_DEEP_WATER 0x0002
#define ALARM_ANCHOR 0x0004
#define ALARM_APPARENT_WIND_ANGLE_LOW 0x0008
#define ALARM_APPARENT_WIND_ANGLE_HIGH 0x0010
#define ALARM_APPARENT_WIND_SPEED_LOW 0x0020
#define ALARM_APPARENT_WIND_SPEED_HIGH 0x0040
#define ALARM_TRUE_WIND_ANGLE_LOW 0x0080
#define ALARM_TRUE_WIND_ANGLE_HIGH 0x0100
#define ALARM_TRUE_WIND_SPEED_LOW 0x0200
#define ALARM_TRUE_WIND_SPEED_HIGH 0x0400
#define ALARM_AUTOPILOT_OFF_COURSE 0x0800
#define ALARM_AUTOPILOT_WIND_SHIFT 0x1000

#define AUTOPILOT_TYPE_400G 0x08
#define AUTOPILOT_TYPE_150G 0x05

typedef enum { ST_AUTOPILOT_MODE_STANDBY = 0x0, ST_AUTOPILOT_MODE_AUTO = 0x2, ST_AUTOPILOT_MODE_VANE = 0x4, ST_AUTOPILOT_MODE_TRACK = 0x8 } ST_AUTOPILOT_MODE;

typedef enum {
  ST_COMMAND_SET_SPEED_DISTANCE_UNITS,
  ST_COMMAND_SET_LAMP_INTENSITY,
  ST_COMMAND_CODE_CANCEL_MOB,
  ST_COMMAND_SET_COUNTDOWN_TIMER,
  ST_COMMAND_SET_DEPTH_UNITS,
  ST_COMMAND_CODE_ALARM_ACKNOWLEDGEMENT,
  ST_COMMAND_MOB_KEYSTROKE,
  ST_COMMAND_ST_60_REMOTE_CONTROL_KEYSTROKE,
  ST_COMMAND_CODE_MAXVIEW_KEYSTROKE,
  ST_COMMAND_CODE_AUTOPILOT,
  ST_COMMAND_SET_AUTOPILOT_RESPONSE_LEVEL,
  ST_COMMAND_SET_AUTOPILOT_RUDDER_GAIN,
  ST_OOMMAND_SET_AUTOPILOT_PARAMETER,
  ST_COMMAND_ENTER_AUTOPILOT_SETUP,
} ST_COMMAND_CODE;

typedef enum {
  ST_AUTOPILOT_COMMAND_AUTO = 0x01,
  ST_AUTOPILOT_COMMAND_STANDBY = 0x02,
  ST_AUTOPILOT_COMMAND_TRACK = 0x03,
  ST_AUTOPILOT_COMMAND_DISP = 0x04,
  ST_AUTOPILOT_COMMAND_TURN_LEFT_1 = 0x05,
  ST_AUTOPILOT_COMMAND_TURN_LEFT_10 = 0x06,
  ST_AUTOPILOT_COMMAND_TURN_RIGHT_1 = 0x07,
  ST_AUTOPILOT_COMMAND_TURN_RIGHT_10 = 0x08,
  ST_AUTOPILOT_COMMAND_DECREASE_GAIN = 0x09,
  ST_AUTOPILOT_COMMAND_INCREASE_GAIN = 0x0a,
  ST_AUTOPILOT_COMMAND_TACK_LEFT = 0x21,
  ST_AUTOPILOT_COMMAND_TACK_RIGHT = 0x22,
  ST_AUTOPILOT_COMMAND_WIND_MODE = 0x23,
  ST_AUTOPILOT_COMMAND_TRACK_MODE = 0x28,
  ST_AUTOPILOT_COMMAND_TOGGLE_RESPONSE_LEVEL = 0x2e,
  ST_AUTOPILOT_COMMAND_RETURN_TO_COURSE = 0x41,
  ST_AUTOPILOT_COMMAND_ENTER_COMPASS_CALIBRATION_MODE = 0x42,
  ST_AUTOPILOT_COMMAND_PRESS_TRACK_LONGER = 0x43,
  ST_AUTOPILOT_COMMAND_PRESS_DISP_LONGER = 0x44,
  ST_AUTOPILOT_COMMAND_PRESS_LEFT_1_LONGER = 0x45,
  ST_AUTOPILOT_COMMAND_PRESS_LEFT_10_LONGER = 0x46,
  ST_AUTOPILOT_COMMAND_PRESS_RIGHT_1_LONGER = 0x47,
  ST_AUTOPILOT_COMMAND_PRESS_RIGHT_10_LONGER = 0x48,
  ST_AUTOPILOT_COMMAND_RETURN_TO_WIND_ANGLE = 0x63,
  ST_AUTOPILOT_COMMAND_PRESS_LEFT_10_RIGHT_10_LONGER = 0x68,
  ST_AUTOPILOT_COMMAND_ENTER_RUDDER_GAIN_MODE = 0x6e,
  ST_AUTOPILOT_COMMAND_HOLD_LEFT_1 = 0x80,
  ST_AUTOPILOT_COMMAND_HOLD_LEFT_10 = 0x81,
  ST_AUTOPILOT_COMMAND_HOLD_RIGHT_1 = 0x82,
  ST_AUTOPILOT_COMMAND_HOLD_RIGHT_10 = 0x83,
  ST_AUTOPILOT_COMMAND_RELEASE_HELD_KEY = 0x84
} ST_AUTOPILOT_COMMAND;

typedef enum { AUTOPILOT_MODE_NOT_PRESENT, AUTOPILOT_MODE_STANDBY, AUTOPILOT_MODE_AUTO, AUTOPILOT_MODE_VANE, AUTOPILOT_MODE_TRACK } AUTOPILOT_MODE;
typedef enum { AUTOPILOT_RESPONSE_LEVEL_AUTOMATIC_DEADBAND, AUTOPILOT_RESPONSE_LEVEL_MINIMUM_DEADBAND } AUTOPILOT_RESPONSE_LEVEL;

int st_initialize();
void st_exit();
